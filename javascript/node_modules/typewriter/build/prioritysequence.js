// Generated by CoffeeScript 1.10.0
(function() {
  var PrioritySequence, Sequence, assert;

  assert = require('assert');

  Sequence = require('./sequence');

  PrioritySequence = (function() {
    function PrioritySequence(onWait) {
      this.onWait = onWait;
      this._sequences = [];
      this._waiting = true;
      if (typeof this.onWait === "function") {
        this.onWait();
      }
    }

    PrioritySequence.prototype._next = function() {
      var i, len, ref, s, sequence;
      sequence = null;
      ref = this._sequences;
      for (i = 0, len = ref.length; i < len; i++) {
        s = ref[i];
        if (s != null) {
          if (s.empty()) {
            continue;
          }
          sequence = s;
          break;
        }
      }
      if (sequence != null) {
        return sequence.next(this._next.bind(this));
      } else {
        this._sequences = [];
        this._waiting = true;
        return typeof this.onWait === "function" ? this.onWait() : void 0;
      }
    };

    PrioritySequence.prototype.then = function(priority, fn) {
      assert.ok(priority != null, 'The priority must be specified');
      assert.strictEqual(typeof priority, 'number', 'Priority must be a number');
      assert.strictEqual(~~priority, priority, 'Priority must be an integer');
      assert.ok(priority >= 0, 'Priority must be a positive integer');
      assert.ok(fn != null, 'The function must be specified');
      if (this._sequences[priority] == null) {
        this._sequences[priority] = new Sequence();
      }
      this._sequences[priority].add(fn);
      if (this._waiting) {
        this._waiting = false;
        return this._next();
      }
    };

    return PrioritySequence;

  })();

  module.exports = PrioritySequence;

}).call(this);
